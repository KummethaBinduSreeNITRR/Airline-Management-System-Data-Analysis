/*Problem 1: Some aircrafts might not be used to their full potential, leading to inefficiencies.
SQL Solution:This query helps in identifying underutilized aircrafts, allowing for better scheduling and utilization strategies.*/

SELECT aircraft_code, COUNT(flight_id) AS total_flights
FROM flights
GROUP BY aircraft_code
ORDER BY total_flights ASC;

/*Problem 2: Understanding the competitive landscape and market demand.
SQL Solution:This query helps in identifying high-demand destinations, enabling better route planning and competitive analysis.*/

SELECT a.city, COUNT(f.flight_id) AS flight_count
FROM flights f
JOIN airports_data a ON f.arrival_airport = a.airport_code
GROUP BY a.city
ORDER BY flight_count DESC;

/*Problem 3: High cancellation rates impacting reliability and customer trust.
SQL Solution:This query tracks flights with frequent cancellations, enabling management to investigate and mitigate causes.*/

SELECT flight_id, COUNT(*) AS cancellation_count
FROM flights
WHERE status = 'Cancelled'
GROUP BY flight_id
ORDER BY cancellation_count DESC;

/*Problem 4: Identify the top 10 frequent flyers for loyalty program enhancements.
SQL Solution:This query identifies the top 10 frequent flyers, enabling the enhancement of loyalty programs and personalized marketing.*/

SELECT passenger_id, COUNT(ticket_no) AS flights_flown
FROM tickets
GROUP BY passenger_id
ORDER BY flights_flown DESC
LIMIT 10;

/*Problem 5: Check the availability of seats on a specific flight.
SQL Solution:This query identifies available seats on a specific flight, aiding in reservation and check-in processes.*/

SELECT s.seat_no
FROM seats s
LEFT JOIN boarding_passes bp ON s.seat_no = bp.seat_no AND s.aircraft_code = bp.flight_id
WHERE s.aircraft_code = 'SPECIFIC_FLIGHT_ID' AND bp.seat_no IS NULL;

/*Problem 6: Provide a daily summary of flight operations for operational monitoring.
SQL Solution:This query provides a daily summary of flight operations, including the total number of flights, cancellations, and delays.*/

SELECT DATE(scheduled_departure) AS flight_date, COUNT(flight_id) AS total_flights, 
       COUNT(CASE WHEN status = 'Cancelled' THEN 1 END) AS cancelled_flights, 
       COUNT(CASE WHEN status = 'Delayed' THEN 1 END) AS delayed_flights
FROM flights
GROUP BY DATE(scheduled_departure)
ORDER BY flight_date DESC;

/*Problem 7: Calculate the average distance of flights to understand the operational range.
SQL Solution:This query calculates the average distance of flights, providing insights into the operational range of the airline's flights.*/

SELECT AVG(range) AS average_distance
FROM aircrafts_data a
JOIN flights f ON a.aircraft_code = f.aircraft_code;

/*Problem 8: Determine the most popular travel dates for planning and promotions.
SQL Solution:This query identifies the most popular travel dates, aiding in planning and promotional activities.*/

SELECT scheduled_departure  , COUNT(*) AS total_flights
FROM flights
GROUP BY scheduled_departure 
ORDER BY total_flights DESC
LIMIT 10;

/*Problem 9 Analyze revenue generated by different fare conditions (e.g., Economy, Business, First).
SQL Solution:This query analyzes revenue generated by different fare conditions, providing insights into the financial performance of various service classes.*/

SELECT fare_conditions, SUM(amount) AS total_revenue
FROM ticket_flights
GROUP BY fare_conditions
ORDER BY total_revenue DESC;

/*Problem 10: Determine the most popular flight routes to optimize scheduling and marketing.
SQL Solution:This query identifies the top 10 most popular flight routes based on the number of flights, helping to optimize scheduling and marketing strategies.*/

SELECT departure_airport, arrival_airport, COUNT(flight_id) AS total_flights
FROM flights
GROUP BY departure_airport, arrival_airport
ORDER BY total_flights DESC
LIMIT 10;


